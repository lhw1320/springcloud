当今互联网领域，微服务架构越来越火，而组成微服务架构的重要组成部分就是Spring Boot，
Spring Boot能够大大提高我们的开发效率，同时另一种提高开发效率的技术就是热部署技术



1、热部署的使用场景

场景：
1.本地调试
本地调试代码的时候，改动一行代码，重新启动本地服务器来进行调试
2.线上发布
本地修改了少量代码，重新编译，提交到服务器，重新启动线上的服务器，加载修改的代码


服务器
Tomcat
Jboss
Jetty

重启服务器浪费时间

思考：
一些网站或者服务，比如游戏，银行，金融交易类等等，全年不间断运行，即使重新发布程序后也不需要重启服务，他们是怎么做到的呢呢？
比如说国内的京东，天猫，淘宝等，国外的Facebook，亚马逊等



2、热部署的使用场景总结

优点：
1.无论本地还是线上，都适用
2.无需重启服务器
   提高开发、调试效率
   提升发布、运维效率，降低运维成本
   
比如：  
本地修改后，热部署会自动加载修改后的代码，不需要重启服务器
线上服务重启发布代码后，热部署自动加载修改后的代码，不需要重启线上服务器


   
   

1、热部署与热加载的联系和区别	

Java热部署与Java热加载的联系和区别
Java热部署与热加载的联系
1.不重启服务器编译/部署项目
2.基于Java的类加载器实现

Java热部署与热加载的区别
部署方式
热部署在服务器运行时重新部署项目
热加载在运行时重新加载class

实现原理
热部署直接重新加载整个应用
热加载在运行时重新加载class

使用场景
热部署更多的是在生产环境使用
热加载则更多的实在开发环境使用

热加载几乎没有
安全性，直接修改Java虚拟机中的字节码文件，难以监控和控制
热加载有个通俗的名字就是开发者模式



2、热部署的原理与实现	
1.热部署的原理解析
Java类的加载过程：
1)初始化JVM
2)产生启动类加载器
子类，自动加载
3)标准扩展类加载器
子类，自动加载
4)系统类加载器
5)加载class文件
交给其父类加载

类加载的五个阶段
1)加载
查找类的静态存储结构，并加载到Java虚拟机中
然后转化为方法区的运行时数据结构，生成Class对象，
允许用户自定义类加载
2)验证
确保字节码文件是安全的，不会对Java虚拟机造成危害
3)准备
确定内存布局，初始化类变量，这里是赋值初始化值，不会进行程序代码中的赋值操作
int类型的初始值是0
4)解析
将符号引用变成直接引用
5)初始化
调用程序代码执行赋值操作，这里才是程序代码中阿的赋值操作
初始化五种时机
1.new、getstatic、putstatic、invokestatic四条字节码指令
2.使用Java反射包中的类
3.子类的父类没有进行初始化
4.main()方法
5.使用JDK1.7动态语言支持

Java类加载特点
1.由AppClass Loader（系统类加载器）开始加载指定的类
2.类加载器将加载任务交给其父，如果其父找不到，再由自己去加载
3.Bootstrap Loader（启动类加载器）是最顶级的类加载器


Java类的热部署
1.类的热加载
通过类的热加载实现热部署
@Override
protected Class<?> findClass(String name) throws ClassNotFoundException {
      System.out.println("加载类===" + name);
      byte[] data = loadClassData(name);
      return this.defineClass(name, data, 0, data.length);
}

2.配置Tomcat
通过配置Tomcat实现热部署
三种方式：
1.直接把项目web文件夹放在webapps里
访问方式：
http://127.0.0.1:8080/TomcatHotPublish/HotPublishServlet
2.在tomcat/conf/server.xml中的<host></host>内部添加<context/>标签
配置：
<Context debug="0" docBase="E:/web" path="hot" privileged="true" reloadable="true"/>
在web目录下直接拷贝TomcatHotPublish文件夹下的所有文件
访问方式：
http://127.0.0.1:8080/hot/HotPublishServlet
3.在%tomcat_home%/conf/Catalina/localhost中添加一个XML文件，
访问的时候需要使用XML文件的名字作为访问路径URL的一部分
配置：
hot.xml
<?xml version="1.0" encoding="UTF-8"?>
<Context docBase="E:/web" reloadable="true"/>
在web目录下直接拷贝TomcatHotPublish文件夹下的所有文件
访问方式：
http://127.0.0.1:8080/hot/HotPublishServlet

HotPublishServlet类在TomcatHotPublish项目中

Java类热加载案例分析
写一个Java类加载的实际案例
要求：
1.类层次结构清晰，修改某一个Java类文件，不需要
重启服务或者重新编译运行程序
2.可适当的运用一些设计模式使代码结构更加清晰明了，
比如工厂模式等

代码层次：
核心类MyClassLoader
封装加载类的信息LoadInfo
热加载接口BaseManager
热加载接口实现类MyManager
MyManager工厂类ManagerFactory
后台线程刷新类MsgHandler
测试类ClassLoaderTest


3、构建Spring Boot项目的流程	


4、Spring Boot热部署的实现与发布方式	


1.热部署的原理解析

2.案例分析

3.项目演示

4.测试

5.发布程序
两种发布方式：
jar包
war包




















