学习
com.huajin.exchange.utils.JSONUtil

两个方法
getList
getObject




学习
http://blog.didispace.com/springbootswagger2/
http://www.mamicode.com/info-detail-1861794.html
http://blog.csdn.net/u014231523/article/details/76522486

Swagger2开发
工程引入两个jar包
compile('io.springfox:springfox-swagger-ui:2.6.1')
compile('io.springfox:springfox-swagger2:2.6.1')

配置
package com.huajin.assetserver.config;

import java.time.LocalDate;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@ComponentScan(basePackages = { "com.huajin.assetserver.*" })
@EnableSwagger2
public class Swagger2 {
	@Bean
	public Docket apiDocket() {
		return new Docket(DocumentationType.SWAGGER_2)
				
				.apiInfo(apiInfo())
				.select()
				.apis(RequestHandlerSelectors.basePackage("com.huajin.assetserver"))
				.paths(PathSelectors.any())
				.build()
				.pathMapping("/")
				.directModelSubstitute(LocalDate.class, String.class)
				.genericModelSubstitutes(ResponseEntity.class)
				.useDefaultResponseMessages(false)
				.enableUrlTemplating(true);
	}
	
	private ApiInfo apiInfo() {
		return new ApiInfoBuilder()
				.title("资料管理Restful API 文档")
				.description("资料管理Restful API 接口文档")
				//.termsOfServiceUrl("git@github.com:LiuwqGit/spring-boot-eureka.git")
				.contact(new Contact("qdfae", "url", "email")).version("1.0").build();
	}
	
	@Bean
	public RestTemplate restTemplate() {
		return new RestTemplate();
	}
}



使用
package com.huajin.assetserver.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.huajin.assetserver.controller.base.BaseController;
import com.huajin.assetserver.service.asset.AssetRootTccService;
import com.huajin.assetserverclient.vo.AssetBalComboVo;
import com.huajin.assetserverclient.vo.AssetBalForPayinvestVo;
import com.huajin.assetserverclient.vo.AssetBalForRepayVo;
import com.huajin.assetserverclient.vo.AssetBalForTransferVo;
import com.huajin.baymax.support.ResponseCodeBase;
import com.huajin.baymax.support.ResponseCodeProperties;
import com.huajin.common.domain.DataResponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * 提供tcc模式的接口调用
 * @author qiang.wen
 * @date 2017年11月14日 上午11:10:40
 */
@RestController
@RequestMapping("/asset/tcc")
@Api(description = "权益登记微服务(tcc模式)")
public class AssetTccController extends BaseController{

	@Autowired
	private AssetRootTccService assetRootTccService;
	
	
	/**
	 * 处理放款后的权益数据
	 * @param comboVoList
	 * @return
	 * @author qiang.wen
	 * @date 2017年11月14日 上午11:16:12
	 */
	@PostMapping("/handleAssetForRelease")
	@ApiOperation(value="处理放款后的权益",notes="处理放款后的权益")
	public DataResponse<Boolean> handleAssetForRelease(@RequestBody List<AssetBalComboVo> comboVoList){
		boolean handleFlag = assetRootTccService.tryHandleAssetForRelease(comboVoList);
		DataResponse<Boolean> response = DataResponse.create();
		response.setData(handleFlag)
		         .setRetcode(ResponseCodeBase.OK)
		         .setMsg(ResponseCodeProperties.getProperty(ResponseCodeBase.OK));
		return response;
	}
	
	
	/**
	 * 处理兑付后的权益数据
	 * @param payinvetVoList
	 * @return
	 * @author qiang.wen
	 * @date 2017年11月14日 下午1:38:00
	 */
	@PostMapping("/handleAssetForPayinvest")
	@ApiOperation(value="处理兑付后的权益",notes="处理兑付后的权益")
	public DataResponse<Boolean> handleAssetForPayinvest(@RequestBody List<AssetBalForPayinvestVo> payinvetVoList){
		boolean handleFlag = assetRootTccService.tryHandleAssetForPayInvest(payinvetVoList);
		DataResponse<Boolean> response = DataResponse.create();
		response.setData(handleFlag)
		         .setRetcode(ResponseCodeBase.OK)
		         .setMsg(ResponseCodeProperties.getProperty(ResponseCodeBase.OK));
		return response;
	}
	
	/**
	 * 处理还款后的权益数据
	 * @param repayVo
	 * @return
	 * @author qiang.wen
	 * @date 2017年11月14日 下午4:23:53
	 */
	@PostMapping("/handleAssetForRepay")
	@ApiOperation(value="处理还款后的权益",notes="处理还款后的权益")
	public DataResponse<Boolean> handleAssetForRepay(@RequestBody AssetBalForRepayVo repayVo){
		boolean handleFlag = assetRootTccService.tryHandleAssetForRepay(repayVo);
		DataResponse<Boolean> response = DataResponse.create();
		response.setData(handleFlag)
		         .setRetcode(ResponseCodeBase.OK)
		         .setMsg(ResponseCodeProperties.getProperty(ResponseCodeBase.OK));
		return response;
	}
	
	/**
	 * 处理转让后的权益数据
	 * @param transferVo
	 * @return
	 * @author hongwei.lian
	 * 2017年11月20日 上午11:03:47
	 */
	@PostMapping("/handleAssetForTransfer")
	@ApiOperation(value="处理转让后的权益",notes="处理转让后的权益")
	public DataResponse<Boolean> handleAssetForTransfer(@RequestBody AssetBalForTransferVo transferVo){
		boolean handleFlag = assetRootTccService.tryHandleAssetForTransfer(transferVo);
		DataResponse<Boolean> response = DataResponse.create();
		response.setData(handleFlag)
		         .setRetcode(ResponseCodeBase.OK)
		         .setMsg(ResponseCodeProperties.getProperty(ResponseCodeBase.OK));
		return response;
	}
	
}


怎么查看Swagger2接口文档
服务器IP地址:服务端口号
权益登记微服务在线接口文档
http://172.16.21.2:8107/swagger-ui.html#/


